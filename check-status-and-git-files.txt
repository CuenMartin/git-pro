GIT STATUS 
- Git status is going to give us the status of any changes or any files that have been added to the folder
- but I could run the "git status" command and it will tell me that there are not files that are being tracked
- to track the files I will run the command "git add"

GIT ADD 

- so if I want to track the file of index.html then I will say "git add index.html"
- from there we need to commit the file since after you do git add it is waiting for you to commit it

GIT COMMIT 

- we will have to do something called git commit 
- git commit is saving the file at the exact time so we can go back and reference the changes 
- here is how I commit the file: git commit -am "I added a new file called html"
- now the changes will be saved and I can when I made the change and why I made the change 
- when I commit files I should be giving good detials as to why the change has been made
- it will also say it has 12 insertion for example, insertion just means "how many lines I have in my file"
- once I do all the commits i need to do and I type "git status" then it will say that there are no commits to be made
- if a file has been changed and I say git status then it will tell me when a file has been changed and that 
I still need to make the change


GIT DIFF 

- git diff will actually show us the changes that we made in that file, it will highlight the changes in green
- it will also tell me when I have deleted something, it highlight the deletion in red 


GIT ADD . 

- to add all the files to the staging area I must type "git add ."
- every time I add a new file and folder to my project I nedd to run the git add . command

GIT LOG 

- git log is where we get to see the log of all the changes that have been commited
- it will show the date and time that the changes have been commited 
- there is a long string that is after the commit log that looks like this for example: 
"commit 199688debc2f39998d2836a6c08bc54b5b8aaf54" this will be useful for if you want to go back in time 

GIT LOG -p

- git log -p is the command i would use if I want to check a specific file for example: 
- I would say git log -p index.html and that would show me the changes i made for that specific file 
- to get out of the command you just need to press "q"


GIT BLAME 

- git blame is the command you run when you want to see who made changes on a particular file 
- so if i wanted to check who made changes on a css file i would say git blame css/main.css

GIT BRANCHES 

IMPORTANT NOTE ABOUT BRANCHES -- If i make a new branch but I fuck up and delete shit or anything like that 
then I will still have the orginal code in the master branch and I can still get the infomration back
-also with most companies the master branch is what you will see live, so all the other developers will
have their own branch on their local computer 
- if I change back to master from another brach I will see that master doesn't have the same changes 
as the other brancvhes that I have been committing changes too, this makes git really good for projects 



- say one person was working on the css and another was working on javascript, each of these would have a branch 
- so pretty much  eah individual has a branch 
- right now I am working on the master branch which is nver recomended 
- what i need to do is create my own branch, this is what you do it companmies 
- so to run this command I will say: git branch cuen -- so now I have created my own branch 
- everytime you say git branch it will make a copy of the current branch that you are in


GIT BRANCH -AV 

- this is how you check what branch you are actually in 
- it is going to tell us that we are still in the master branch and you will see which branch you are in because 
it will show you a green color on the branch that is currently being used 

GIT CHECKOUT 

- this is how you check what branch you are actually in 
- if i was to change to the branch of cuen for example i would say: 
git checkout cuen and it will tell me that it si switched to cuen

GIT CHECKOUT -b 

- this is a shorthand way of adding a  new branch from within the branch you are already in 
- sop you will go from the branch you are in straight to the new branch which has been created 
- it will also copy everything from within the branch that you are in, this will copy everything from the master 

DELETING BRANCHES 

- here we are going to create another branch called sidnav2 and mess it up so we can delete it 
- here is how you delete it: git branch -D sidnav2
- now it will be delted 
- this is good for when you feel something is messed up or if it's taking too much space and you want to delete it


MERGE BRANCHES AND SOLVING CONFLICTS FROM

- best advice is to merge the master branch into the feature branch
- never merge feature into master the first time
- if you have something that has broken in the feature branch and you merge it into master then 
you will bring those bugs into master so this is why it's bad practice 
- the master branch has to be a clean branch and you don't want to bring any problems into the master branches
- the master branch is the main website 
- so if you make any changes to your branch you must merge the master to your branch in case you've 
made mistakes in you bracnh so the bugs dont go over to the master branch 

MERGING BRANCHES 

- so first I will make a list item in the master branch 
- then I will merge it to the my branch called "cuen" which has the header in it 





